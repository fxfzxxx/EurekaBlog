<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aaron 的博客</title>
    <link>/</link>
    <description>Recent content on Aaron 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2021 Aaron Fan
</copyright>
    <lastBuildDate>Mon, 28 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blank</title>
      <link>/%E4%B8%8D%E7%94%A8%E7%9A%84%E4%B8%BB%E9%A1%B5%E6%8E%A7%E4%BB%B6/blank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/%E4%B8%8D%E7%94%A8%E7%9A%84%E4%B8%BB%E9%A1%B5%E6%8E%A7%E4%BB%B6/blank/</guid>
      <description>Write anything you like here!</description>
    </item>
    
    <item>
      <title>An example program of react-redux implement</title>
      <link>/posts/%E7%A7%91%E6%8A%80/%E9%A1%B9%E7%9B%AE/react-redux-example-program/</link>
      <pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/%E9%A1%B9%E7%9B%AE/react-redux-example-program/</guid>
      <description>Project Features States are managed by redux. UI components are sealed in containers without data proceed. Two components can communicate though react-redux. Project&amp;rsquo;s technology stack html + CSS + JavaScript + React + react-redux + redux Project source code The source code can be found in Github repo react-redux demo. Please click to check the</description>
    </item>
    
    <item>
      <title>react之 Hooks 和一些扩展</title>
      <link>/posts/%E7%A7%91%E6%8A%80/react/9-hooks-%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95/</link>
      <pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/react/9-hooks-%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%89%A9%E5%B1%95/</guid>
      <description>1. setState setState更新状态的2种写法 (1). setState(stateChange, [callback])------对象式的setState 1.sta</description>
    </item>
    
    <item>
      <title>react之 第三方 redux 的使用</title>
      <link>/posts/%E7%A7%91%E6%8A%80/react/8-redux/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/react/8-redux/</guid>
      <description>Redux redux是什么 redux是一个专门用于做状态管理的JS库(不是react插件库)。 它可以用在react, angular,</description>
    </item>
    
    <item>
      <title>react之 UI 组件库</title>
      <link>/posts/%E7%A7%91%E6%8A%80/react/7-ui%E7%BB%84%E4%BB%B6%E5%BA%93/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/react/7-ui%E7%BB%84%E4%BB%B6%E5%BA%93/</guid>
      <description>流行的开源 React UI 组件库 国外: material-UI 国内: ant-design antd 安装: yarn add antd 基本使用 import React, { Component } from &amp;quot;react&amp;quot; import { Button } from &amp;quot;antd&amp;quot; import { WechatOutlined } from &#39;@ant-design/icons&#39; import &amp;quot;antd/dist/antd.css&amp;quot; export default class App extends</description>
    </item>
    
    <item>
      <title>react之 初识路由</title>
      <link>/posts/%E7%A7%91%E6%8A%80/react/6-%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/react/6-%E8%B7%AF%E7%94%B1/</guid>
      <description>SPA 单页面应用 Single Page Application 整个应用只有一个完整的页面 点击页面中的连接不会刷新页面, 只会做页面的局部刷新 数据都用 Ajax 请求,</description>
    </item>
    
    <item>
      <title>react之 AJAX</title>
      <link>/posts/%E7%A7%91%E6%8A%80/react/5-ajax/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/react/5-ajax/</guid>
      <description>axios 的使用 react 主要使用 axios 来进行异步请求. 配置单个代理的注意事项 代理服务器的域名和端口是和客户端相同的. 跨域的时候,</description>
    </item>
    
    <item>
      <title>react之 脚手架</title>
      <link>/posts/%E7%A7%91%E6%8A%80/react/4-%E8%84%9A%E6%89%8B%E6%9E%B6/</link>
      <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/react/4-%E8%84%9A%E6%89%8B%E6%9E%B6/</guid>
      <description>脚手架的意义 xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的模板项目 包含了所有需要的配置（语法检查、js</description>
    </item>
    
    <item>
      <title>react之 Diffing 算法</title>
      <link>/posts/%E7%A7%91%E6%8A%80/react/3-dom-%E7%9A%84-diffing-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/react/3-dom-%E7%9A%84-diffing-%E7%AE%97%E6%B3%95/</guid>
      <description>证明 Diffing 算法存在的小案例 //1.创建组件 class Time extends React.Component { state ={date: new Date()} componentDidMount() { setInterval(()=&amp;gt; { this.setState( {date: new Date()} ) },1000) } //在两个不同级别的 input 内输入内容</description>
    </item>
    
    <item>
      <title>react之生命周期</title>
      <link>/posts/%E7%A7%91%E6%8A%80/react/2-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/react/2-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>引出声明周期 在组件挂载(mount)完毕后接着开启定时器, 在卸载(unmount)定时器后, 接着取消定时器. 就</description>
    </item>
    
    <item>
      <title>react之基本语法</title>
      <link>/posts/%E7%A7%91%E6%8A%80/react/1-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/react/1-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>Creating a Toolchain from Scratch A JavaScript build toolchain typically consists of: A package manager, such as Yarn or npm. It lets you take advantage of a vast ecosystem of third-party packages, and easily install or update them. A bundler, such as webpack or Parcel. It lets you write modular code and bundle it together</description>
    </item>
    
    <item>
      <title>Greedy Snake mini-game developed by ES6 modularly</title>
      <link>/posts/%E7%A7%91%E6%8A%80/%E9%A1%B9%E7%9B%AE/%E8%B4%AA%E5%90%83%E8%9B%87/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/%E9%A1%B9%E7%9B%AE/%E8%B4%AA%E5%90%83%E8%9B%87/</guid>
      <description>Project Features Interactive functions implemented by native js ES6 modular development Divided into four classes Food Class: generate a food with random position. Snake Class: initialize a snake, add one unit of lenth, enable movement and moniter if the sanke is dead. Rules Class: set up the speed, score, when to start and end, rules</description>
    </item>
    
    <item>
      <title>ToDo 待办事项项目</title>
      <link>/posts/%E7%A7%91%E6%8A%80/%E9%A1%B9%E7%9B%AE/todomvc/</link>
      <pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/%E9%A1%B9%E7%9B%AE/todomvc/</guid>
      <description>项目特点 原生 js 实现的交互功能 localStorage 实现的数据持久化 构建过程中, 首先实现了用已知数据来渲染页面, 然后再通过监听事件来</description>
    </item>
    
    <item>
      <title>Java 复习之视频通信小项目</title>
      <link>/posts/%E7%A7%91%E6%8A%80/%E9%A1%B9%E7%9B%AE/java-%E5%A4%8D%E4%B9%A0%E4%B9%8B%E8%A7%86%E9%A2%91%E9%80%9A%E4%BF%A1%E5%B0%8F%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/%E9%A1%B9%E7%9B%AE/java-%E5%A4%8D%E4%B9%A0%E4%B9%8B%E8%A7%86%E9%A2%91%E9%80%9A%E4%BF%A1%E5%B0%8F%E9%A1%B9%E7%9B%AE/</guid>
      <description>1. 简单的服务器与客户端 1.1 建立 TCP 连接 服务端需要有一个 ServerSocket 对象, 通过他的 accept 方法监听客户端的 socket 请求并且返回一个sock</description>
    </item>
    
    <item>
      <title>小米首页的模拟</title>
      <link>/posts/%E7%A7%91%E6%8A%80/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E7%B1%B3%E9%A6%96%E9%A1%B5%E6%A8%A1%E4%BB%BF/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E7%B1%B3%E9%A6%96%E9%A1%B5%E6%A8%A1%E4%BB%BF/</guid>
      <description>项目的特点 CSS 实现的下拉菜单, 并且鼠标悬浮菜单不收回. CSS 实现了众多动态效果, 例如首页图表的雪碧图动画. 利用爬虫脚</description>
    </item>
    
    <item>
      <title>渐变轮播图</title>
      <link>/posts/%E7%A7%91%E6%8A%80/%E9%A1%B9%E7%9B%AE/%E6%B8%90%E5%8F%98%E8%BD%AE%E6%92%AD%E5%9B%BE/</link>
      <pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/%E9%A1%B9%E7%9B%AE/%E6%B8%90%E5%8F%98%E8%BD%AE%E6%92%AD%E5%9B%BE/</guid>
      <description>这个功能在网站的首页比较常见, 通常用于产品的宣传. 另外, 也常见于一些图片集的展示. 通过一些扩展可以实现更完整的</description>
    </item>
    
    <item>
      <title>1.Java 复习之 基础语法</title>
      <link>/docs/java-basics/1.-java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/1.-java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>基本概念 一个 Java 程序可以看作是一些列对象的集合，这些对象通过调用彼此的方法来协同工作。下面介绍几个基本概念。 对象</description>
    </item>
    
    <item>
      <title>2.Java 复习之 命名及注释标准</title>
      <link>/docs/java-basics/2.-java%E5%91%BD%E5%90%8D%E5%8F%8A%E6%B3%A8%E9%87%8A%E6%A0%87%E5%87%86/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/2.-java%E5%91%BD%E5%90%8D%E5%8F%8A%E6%B3%A8%E9%87%8A%E6%A0%87%E5%87%86/</guid>
      <description>命名及注释标准 命名规范 1、 项目名全部小写 2、 包名全部小写 3、 类名首字母大写，如果类名由多个单词组成，每个单词的</description>
    </item>
    
    <item>
      <title>3.1 Java 复习之 对象和类</title>
      <link>/docs/java-basics/3.-java%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/3.-java%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/</guid>
      <description>一个类可以包含以下类型变量： 局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都</description>
    </item>
    
    <item>
      <title>3.2 Java 复习之 面向对象的记忆偏差点</title>
      <link>/docs/java-basics/3.java%E5%A4%8D%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/3.java%E5%A4%8D%E4%B9%A0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>面向对象 构造函数内调用构造函数 一般运用在设置默认值 要放在构造函数方法体内的第一行 class Student { String name; public Student(String name) { this.name = name; } public Student()</description>
    </item>
    
    <item>
      <title>4.Java 复习之 修饰符</title>
      <link>/docs/java-basics/4.-java%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/4.-java%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>Java 修饰符主要分两类: 访问修饰符 (Access Modifiers) 非访问修饰符 (Non-Access Modifiers) 访问修饰符 default (即默认，什么也不写）: 在同一 包内 可见，不使用任</description>
    </item>
    
    <item>
      <title>5.Java 复习之 继承</title>
      <link>/docs/java-basics/5.-java-%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/5.-java-%E7%BB%A7%E6%89%BF/</guid>
      <description>为什么需要继承 代码存在重复了，导致后果就是代码量大且臃肿，而且维护性不高(维护性主要是后期需要修改的时候，就需</description>
    </item>
    
    <item>
      <title>6.Java 复习之 重写和重载</title>
      <link>/docs/java-basics/6.-java-%E9%87%8D%E5%86%99override%E4%B8%8E%E9%87%8D%E8%BD%BDoverload/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/6.-java-%E9%87%8D%E5%86%99override%E4%B8%8E%E9%87%8D%E8%BD%BDoverload/</guid>
      <description>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理 重写就是当子类继承自父类的相同方法，输入数据一样，</description>
    </item>
    
    <item>
      <title>7.Java 复习之 包的解释</title>
      <link>/docs/java-basics/7.-java-%E5%8C%85/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/7.-java-%E5%8C%85/</guid>
      <description>Java 包 package 通常，一个公司使用它互联网域名的颠倒形式来作为它的包名.例如：互联网域名是 runoob.com，所有的包</description>
    </item>
    
    <item>
      <title>小项目 五子棋游戏</title>
      <link>/docs/java-basics/%E4%BA%94%E5%AD%90%E6%A3%8B%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/%E4%BA%94%E5%AD%90%E6%A3%8B%E6%B8%B8%E6%88%8F/</guid>
      <description>项目特点 两种游戏模式: 人机对战和玩家对战. 可以多步悔棋. 项目未使用图片, 图形都是绘制而成. 项目结构以及源码 src ButtonAction</description>
    </item>
    
    <item>
      <title>C#复习之泛型 Generic</title>
      <link>/posts/%E7%A7%91%E6%8A%80/net%E6%A1%86%E6%9E%B6%E7%9A%84%E5%A4%8D%E4%B9%A0/5-%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/net%E6%A1%86%E6%9E%B6%E7%9A%84%E5%A4%8D%E4%B9%A0/5-%E6%B3%9B%E5%9E%8B/</guid>
      <description>泛型 广泛的类型: 泛型类, 泛型方法, 泛型集合, 泛型接口, 泛型委托. 泛型的运用主要在 泛型集合. 泛型类的约束: 关键字</description>
    </item>
    
    <item>
      <title>leetcode 刷题挑战之 链表</title>
      <link>/posts/%E7%A7%91%E6%8A%80/leetcode/%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/leetcode/%E9%93%BE%E8%A1%A8/</guid>
      <description>链表相比如数组, 长度不固定, 可以动态增删. 数组适合查询, 链表适合增删. 203. 移除链表元素 学习了定义 struct 数据结构 用来定</description>
    </item>
    
    <item>
      <title>通俗讲解 git 的使用方法</title>
      <link>/posts/%E7%A7%91%E6%8A%80/git/git/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/git/git/</guid>
      <description>git 分布式版本管理器 git 安装在电脑里的一个软件 用来管理文件夹(repo) 管理: 管理文件夹内时间节点 把文件夹内的代码</description>
    </item>
    
    <item>
      <title>通俗讲解 gulp 的使用方法</title>
      <link>/posts/%E7%A7%91%E6%8A%80/gulp/gulp/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/gulp/gulp/</guid>
      <description>了解 gulp 前端自动化打包构建工具 打包就是把文件 压缩, 整合, 移动, 混淆 常用构建工具 gulp: 基于流的打包构建工具 webpack: 基于 js 文件</description>
    </item>
    
    <item>
      <title>C#复习之struct, Indexer 和运算符的重载</title>
      <link>/posts/%E7%A7%91%E6%8A%80/net%E6%A1%86%E6%9E%B6%E7%9A%84%E5%A4%8D%E4%B9%A0/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/net%E6%A1%86%E6%9E%B6%E7%9A%84%E5%A4%8D%E4%B9%A0/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/</guid>
      <description>结构 Stuct 结构是值类型. 值类型在内存的栈区(stack), 引用类型在内存的堆区(heep). 用的相对少了, 只有在考</description>
    </item>
    
    <item>
      <title>解决国内连接 GitHub 慢的问题</title>
      <link>/posts/%E7%A7%91%E6%8A%80/%E6%97%A5%E5%B8%B8%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85%E8%BF%9E%E6%8E%A5-github-%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/%E6%97%A5%E5%B8%B8%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98/%E8%A7%A3%E5%86%B3%E5%9B%BD%E5%86%85%E8%BF%9E%E6%8E%A5-github-%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>在没有科学上网的情况下, 经常会遇到 GitHub 连接失败的情况. 经查发现, 可以通过配置 /private/etc/hosts 可以达到不搭梯子仍可快速访问 GitHub 的效</description>
    </item>
    
    <item>
      <title>C#复习之停车场小项目</title>
      <link>/posts/%E7%A7%91%E6%8A%80/net%E6%A1%86%E6%9E%B6%E7%9A%84%E5%A4%8D%E4%B9%A0/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%81%9C%E8%BD%A6%E5%9C%BA%E5%B0%8F%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/net%E6%A1%86%E6%9E%B6%E7%9A%84%E5%A4%8D%E4%B9%A0/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%81%9C%E8%BD%A6%E5%9C%BA%E5%B0%8F%E9%A1%B9%E7%9B%AE/</guid>
      <description>停车场练习 首先勾勒一下所有的类: 汽车父类: 字段: 车牌号, 车辆位置, 品牌, 入场时期 轿车子类: 字段: 排量 客车子类:</description>
    </item>
    
    <item>
      <title>C#复习之面向对象</title>
      <link>/posts/%E7%A7%91%E6%8A%80/net%E6%A1%86%E6%9E%B6%E7%9A%84%E5%A4%8D%E4%B9%A0/2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-1/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/net%E6%A1%86%E6%9E%B6%E7%9A%84%E5%A4%8D%E4%B9%A0/2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-1/</guid>
      <description>面向对象 枚举类型是值类型, 读取速度要快很多. 因为是值类型所以可以和整形数相互转换. 注意: 枚举是和类平行的, 写的</description>
    </item>
    
    <item>
      <title>C#复习之基本语法</title>
      <link>/posts/%E7%A7%91%E6%8A%80/net%E6%A1%86%E6%9E%B6%E7%9A%84%E5%A4%8D%E4%B9%A0/1-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/net%E6%A1%86%E6%9E%B6%E7%9A%84%E5%A4%8D%E4%B9%A0/1-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>变量 byte 8bit int 32bit short 16bit long 64bit ushort 16 无符号 uint 32bit ulong 64bit float float fl fl = 10.0f double decimal 货币类型 char 键盘, 不能为空, 单引号 溢出 byte a; a = 1000; 变量溢出 数</description>
    </item>
    
    <item>
      <title>leetcode 刷题挑战之 数组</title>
      <link>/posts/%E7%A7%91%E6%8A%80/leetcode/%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/leetcode/%E6%95%B0%E7%BB%84/</guid>
      <description>704. 二分查找 学习了 vector 的用法 需要在开头声明 #include &amp;lt;vector&amp;gt;. vector&amp;lt;int&amp;gt; nums;. 不能直接把数组的值输入到 vector 中, 要通过循环来 pushback 到 vector 中去. int search(vector&amp;lt;int&amp;gt;&amp;amp; nums) 其中</description>
    </item>
    
    <item>
      <title>静态博客搭建 - 进阶教程 - 基于 academic 主题</title>
      <link>/posts/%E7%A7%91%E6%8A%80/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E8%BF%9B%E9%98%B6%E6%95%99%E7%A8%8B-%E5%9F%BA%E4%BA%8E-academic-%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E8%BF%9B%E9%98%B6%E6%95%99%E7%A8%8B-%E5%9F%BA%E4%BA%8E-academic-%E4%B8%BB%E9%A2%98/</guid>
      <description>&lt;p&gt;进阶的一些列操作, 基本都是根据 &lt;code&gt;config.toml&lt;/code&gt; 内的提示来的. 而不同的主题, 会有不同的 &lt;code&gt;config.toml&lt;/code&gt; 文件. 当选择好心仪的主题后, 首先要把主题的示范页和 &lt;code&gt;config.toml&lt;/code&gt; 文件拿到主文件夹中.&lt;/p&gt;
&lt;p&gt;经过一番研究发现, 目前 hugo 比价流行的主题是 academic , 所以进阶的教程就会基于这个主题来展开. 其他主题的教程其实都差不多.&lt;/p&gt;
&lt;p&gt;最后并没有用这个主题, 主要是因为自由度太高, 反而影响了我继续深挖的心情. 这玩儿搞这么复杂, 配置的时间都赶上我自己弄一套 vue 了.&lt;/p&gt;
&lt;h2 id=&#34;基于-academic-主题的博客的初始化&#34;&gt;基于 academic 主题的博客的初始化&lt;/h2&gt;
&lt;h3 id=&#34;方法-一&#34;&gt;方法 一:&lt;/h3&gt;
&lt;h4 id=&#34;1-安装-academic-主题&#34;&gt;1. 安装 academic 主题&lt;/h4&gt;
&lt;p&gt;到 hugo 官网主题页面, 找到 academic 主题中的下载选项. 此时会直接跳转到 academic 主题的官方 GitHub 仓库, 点击 &lt;code&gt;use the template&lt;/code&gt;. 此时会直接将这个仓库克隆到自己仓库中去,并命名为 &lt;code&gt;hugo-academic&lt;/code&gt;. 到自己的仓库, 复制 clone 的 SSH 代码. 在本地想要存储博客文件的目录下打开命令行, 输入 &lt;code&gt;git clone git@github.com:fxfzxxx/hugo-academic.git&lt;/code&gt; . clone 后面的代码就是之前复制的 SSH 代码. 现在就会把这个主题的所有所需文件克隆到该目录下的 &lt;code&gt;hugo-academic&lt;/code&gt; 文件夹内, 其与 GitHub 中 的仓库同名.&lt;/p&gt;
&lt;h4 id=&#34;2-配置环境&#34;&gt;2. 配置环境&lt;/h4&gt;
&lt;p&gt;新版本的 academic 主题需要 go 的环境, 所以在任意目录下打开命令行, 输入 &lt;code&gt;brew install golong&lt;/code&gt; 来完成 go 环境的下载. 正常来讲, 系统会直接识别出 go 环境的变量. 如果出现不识别的情况, 需要到根目录打开隐藏的 &lt;code&gt;~/.zshrc&lt;/code&gt; 文件, 并在其中另起一行输入&lt;code&gt;export PATH=$PATH:/usr/local/go/bin&lt;/code&gt; 来完成环境变量的配置.&lt;/p&gt;
&lt;h4 id=&#34;3-生成网站的框架&#34;&gt;3. 生成网站的框架&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;hugo-academic&lt;/code&gt; 文件夹内打开命令行, 输入输入 &lt;code&gt;hugo&lt;/code&gt; 来完成博客的渲染. 在命令行输入 &lt;code&gt;hugo serever -D&lt;/code&gt;, 来打开服务器. 在浏览器输入 &lt;code&gt;http://localhost:1313/&lt;/code&gt; 来查看网站的骨架.&lt;/p&gt;
&lt;h3 id=&#34;方法-二--很多无用功的方法-&#34;&gt;方法 二 ( 很多无用功的方法 ):&lt;/h3&gt;
&lt;h4 id=&#34;1-安装-academic-主题-1&#34;&gt;1. 安装 academic 主题&lt;/h4&gt;
&lt;p&gt;到 hugo 官网主题页面, 找到 academic 主题中的下载选项. 此时会直接跳转到 academic 主题的官方 GitHub 仓库, 点击 &lt;code&gt;use the template&lt;/code&gt;. 此时会直接将这个仓库克隆到自己仓库中去. 到自己的仓库, 复制 clone 的 SSH 代码. 然后在本地创建存储博客的文件夹 &lt;code&gt;HugoAcademic&lt;/code&gt; , 在其内创建 &lt;code&gt;theme&lt;/code&gt; 文件夹. 在 &lt;code&gt;theme&lt;/code&gt; 文件夹内打开命令行输入 &lt;code&gt;git clone git@github.com:fxfzxxx/hugo-academic.git  &lt;/code&gt;. clone 后面的代码就是之前复制的 SSH 代码. 现在就会把这个主题的所有所需文件克隆到 &lt;code&gt;theme&lt;/code&gt; 文件夹内.&lt;/p&gt;
&lt;h4 id=&#34;2-配置环境-1&#34;&gt;2. 配置环境&lt;/h4&gt;
&lt;p&gt;新版本的 academic 主题需要 go 的环境, 所以在任意目录下打开命令行, 输入 &lt;code&gt;brew install golong&lt;/code&gt; 来完成 go 环境的下载. 正常来讲, 系统会直接识别出 go 环境的变量. 如果出现不识别的情况, 需要到根目录打开隐藏的 &lt;code&gt;~/.zshrc&lt;/code&gt; 文件, 并在其中另起一行输入&lt;code&gt;export PATH=$PATH:/usr/local/go/bin&lt;/code&gt; 来完成环境变量的配置.&lt;/p&gt;
&lt;h4 id=&#34;3-生成网站的框架-1&#34;&gt;3. 生成网站的框架&lt;/h4&gt;
&lt;p&gt;正常来讲需要通过在 &lt;code&gt;HugoAcademic&lt;/code&gt; 文件夹中打开命令行输入 &lt;code&gt;hugo new site&lt;/code&gt; 来创建一个新的博客. 但是这样初始化的站点, 需要更多的配置. 所以我们可以到下载好的主题文件夹中找到 &lt;code&gt;exampleSite&lt;/code&gt; 文件夹, 把里面的所有文件复制或移动到博客的 &lt;code&gt;HugoAcademic&lt;/code&gt; 文件夹内. 然后在 &lt;code&gt;HugoAcademic&lt;/code&gt; 目录下打开命令行, 输入 &lt;code&gt;hugo&lt;/code&gt; 来完成博客的渲染. 在命令行输入 &lt;code&gt;hugo serever -D&lt;/code&gt;, 来打开服务器. 在浏览器输入 &lt;code&gt;http://localhost:1313/&lt;/code&gt; 来查看网站的框架.&lt;/p&gt;
&lt;h2 id=&#34;详解-config内的配置文件&#34;&gt;详解 config内的配置文件&lt;/h2&gt;
&lt;p&gt;在该目录下会有一个 &lt;code&gt;_default&lt;/code&gt; 文件夹, 所有的配置文件都在其中, 并且以 &lt;strong&gt;&lt;a href=&#34;https://learnxinyminutes.com/docs/yaml/&#34;&gt;yaml&lt;/a&gt;&lt;/strong&gt; 为后缀. 不了解 &lt;code&gt;yaml&lt;/code&gt; 语言的不影响对配置文件的更改. 具体的 &lt;code&gt;yaml&lt;/code&gt; 的介绍在超链接内, 感兴趣可以看一下.&lt;/p&gt;
&lt;p&gt;在更改配置文件的时候可以开着 &lt;code&gt;hugo&lt;/code&gt; 服务器监听变化, 实时渲染改变后的页面.&lt;/p&gt;
&lt;h3 id=&#34;1--configyaml&#34;&gt;1.  config.yaml&lt;/h3&gt;
&lt;p&gt;这里涉及更改语言, 所以会涉及到语言简写的标准 &lt;a href=&#34;https://www.w3schools.com/tags/ref_language_codes.asp&#34;&gt;ISO/RFC5646 language identifier&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Configuration of Hugo
# Guide: https://wowchemy.com/docs/getting-started/
# Hugo Documentation: https://gohugo.io/getting-started/configuration/#all-configuration-settings
# This file is formatted using YAML syntax - learn more at https://learnxinyminutes.com/docs/yaml/

title: Academic # Website name 更改首页的网站名 
baseurl: &#39;https://example.com/&#39; # Website URL 自己的域名
# 页脚的版权信息 提供一个模板: &amp;quot;© 2021-2022 AXFBlog 版权所有 [沪ICP102345678号](http://www.beian.miit.gov.cn)&amp;quot;
copyright: &#39;&#39; # Footer text, e.g. &#39;© {year} Me&#39;

############################
## LANGUAGE
############################

defaultContentLanguage: en ## 这里改成 zh, 单独改这里可能会报错, 同时要更改 languages.yaml 里面的语言设置.
hasCJKLanguage: false #因为有中文 改成 True
defaultContentLanguageInSubdir: false
removePathAccents: true

# 下面的都暂时不改, 暂时不影响博客的搭建
############################
## MODULES
############################

module:
  imports:
    - path: github.com/wowchemy/wowchemy-hugo-modules/wowchemy-cms/v5
    - path: github.com/wowchemy/wowchemy-hugo-modules/wowchemy/v5

############################
## ADVANCED
############################

enableGitInfo: false
summaryLength: 30
paginate: 10
enableEmoji: true
enableRobotsTXT: true
footnotereturnlinkcontents: &amp;lt;sup&amp;gt;^&amp;lt;/sup&amp;gt;
ignoreFiles: [\.ipynb$, .ipynb_checkpoints$, \.Rmd$, \.Rmarkdown$, _cache$]
permalinks:
  event: &#39;/talk/:slug/&#39;
  tags: &#39;/tag/:slug/&#39;
  categories: &#39;/category/:slug/&#39;
  publication_types: &#39;/publication-type/:slug/&#39;
disableAliases: true
outputs:
  home: [HTML, RSS, JSON, WebAppManifest, headers, redirects]
  section: [HTML, RSS]
imaging:
  resampleFilter: lanczos
  quality: 75
  anchor: smart
timeout: 600000
taxonomies:
  tag: tags
  category: categories
  publication_type: publication_types
  author: authors
markup:
  _merge: deep
related:
  threshold: 80
  includeNewer: true
  toLower: true
  indices:
    - name: tags
      weight: 100
    - name: categories
      weight: 70

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-languagesyaml&#34;&gt;2. languages.yaml&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Languages
#   Create a section for each of your site&#39;s languages.
#   Documentation: https://wowchemy.com/docs/guide/language/

# Default language
en: # 改成 zh
  languageCode: en-US # 改成 zh-Hans
  # Uncomment for multi-lingual sites, and move English content into `en` sub-folder.
  #contentDir: content/en

# Uncomment the lines below to configure your website in a second language.
#zh:
#  languageCode: zh-Hans
#  contentDir: content/zh
#  title: Chinese website title...
#  params:
#    description: Site description in Chinese...
#  menu:
#    main:
#      - name: 传
#        url: &#39;#about&#39;
#        weight: 1

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-paramsyaml&#34;&gt;3. params.yaml&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# SITE SETUP
# Guide: https://wowchemy.com/docs/getting-started/
# Documentation: https://wowchemy.com/docs/
# This file is formatted using YAML syntax - learn more at https://learnxinyminutes.com/docs/yaml/

# Appearance

# 主题颜色的选择有多种, 默认是 minimal,还有 1950s, Apogee, Coffee, Cyberpunk, Dark, Earth, Forest, Minimal, Mr Robort, Ocean, Rose, Strawberry
theme: minimal 
# 自动夜览模式
day_night: true
font: &#39;&#39;
font_size: L

# SEO

site_type: Person
local_business_type: &#39;&#39;
org_name: &#39;&#39;
description: &#39;&#39;
twitter: &#39;&#39;

# Contact (edit or remove options as required)

email: test@example.org
phone: 888 888 88 88
address:
  street: 450 Serra Mall
  city: Stanford
  region: CA
  postcode: &#39;94305&#39;
  country: United States
  country_code: US
coordinates:
  latitude: &#39;37.4275&#39;
  longitude: &#39;-122.1697&#39;
directions: Enter Building 1 and take the stairs to Office 200 on Floor 2
office_hours:
  - &#39;Monday 10:00 to 13:00&#39;
  - &#39;Wednesday 09:00 to 10:00&#39;
appointment_url: &#39;https://calendly.com&#39;
contact_links:
  - icon: twitter
    icon_pack: fab
    name: DM Me
    link: &#39;https://twitter.com/Twitter&#39;
  - icon: skype
    icon_pack: fab
    name: Skype Me
    link: &#39;skype:echo123?call&#39;
  - icon: keybase
    icon_pack: fab
    name: Chat on Keybase
    link: &#39;https://keybase.io/&#39;
  - icon: comments
    icon_pack: fas
    name: Discuss on Forum
    link: &#39;https://discourse.gohugo.io&#39;

# Site header

main_menu:
  enable: true
  align: l
  show_logo: true
  show_language: false
  show_day_night: true
  show_search: true
  highlight_active_link: true

# Localization

date_format: &#39;Jan 2, 2006&#39;
time_format: &#39;3:04 PM&#39; 
address_format: en-us # 改成 zh

# Site features

highlight: true
highlight_languages:
  - r
math: True
diagram: True
privacy_pack: false
# 页面可否编辑
edit_page:
  repo_url: &#39;&#39;
  content_dir: &#39;&#39;
  repo_branch: main
  editable:
    page: false
    post: false
    book: false
show_related:
  book: true
  page: false
  post: true
  project: true
  publication: true
  event: true
reading_time: true # 大约的阅读时间
section_pager: false
docs_section_pager: true
sharing: true # 社交媒体分享
copyright_license:
  enable: false
  allow_derivatives: false
  share_alike: true
  allow_commercial: false
  notice: &#39;This work is licensed under {license}&#39;
abstract_length: 135 缩略的数字
plugins_js: []
avatar:
  gravatar: false
  shape: circle
publications:
  date_format: January 2006
  citation_style: apa
projects:
  post_view: 2
  publication_view: 2
  talk_view: 2
breadcrumb:
  page_types:
    book: true
comments: #评论
  provider: &#39;&#39;
  commentable:
    post: true
    book: true
    project: true
    publication: true
    event: true
  disqus:
    shortname: &#39;&#39;
    show_count: true
  commento:
    url: &#39;&#39;
search:
  provider: wowchemy
  algolia:
    app_id: &#39;&#39;
    api_key: &#39;&#39;
    index_name: &#39;&#39;
    show_logo: false
map:
  provider: &#39;&#39;
  api_key: &#39;&#39;
  zoom: 15
marketing:
  google_analytics: &#39;&#39;
  google_tag_manager: &#39;&#39;
  google_site_verification: &#39;&#39;
  baidu_site_verification: &#39;&#39;
  baidu_tongji: &#39;&#39;
cms:
  branch: master
  local_backend: false
icon:
  pack:
    ai: true

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-menusyaml&#34;&gt;4. menus.yaml&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Navigation Links
#   To link a homepage widget, specify the URL as a hash `#` followed by the filename of the
#     desired widget in your `content/home/` folder.
#   The weight parameter defines the order that the links will appear in.
# url # 指向 widget
main:
  - name: Home 
    url: &#39;#about&#39;
    weight: 10
  - name: Posts
    url: &#39;#posts&#39;
    weight: 20
  - name: Projects
    url: &#39;#projects&#39;
    weight: 30
  - name: Talks
    url: &#39;#talks&#39;
    weight: 40
  - name: Publications
    url: &#39;#featured&#39;
    weight: 50
  - name: Contact
    url: &#39;#contact&#39;
    weight: 60
    
# 自己的 CV
# Link to a PDF of your resume/CV from the menu.
# To enable, copy your resume/CV to `static/uploads/resume.pdf` and uncomment the lines below.
#  - name: CV
#    url: uploads/resume.pdf
#    weight: 70

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;widget-详解&#34;&gt;widget 详解&lt;/h2&gt;
&lt;p&gt;widget 相关文件都是以 &lt;code&gt;.md&lt;/code&gt; 为后缀并在 &lt;code&gt;content/home&lt;/code&gt; 目录下. 当在 &lt;code&gt; params.yaml&lt;/code&gt; 内编辑头部导航栏的 &lt;code&gt;URL&lt;/code&gt; 时指向 &lt;code&gt;#widget&lt;/code&gt; 实际上就是滑动到主页的对应 &lt;code&gt;widget&lt;/code&gt; 位置.&lt;/p&gt;
&lt;h2 id=&#34;md-文本的显示处理&#34;&gt;md 文本的显示处理&lt;/h2&gt;
&lt;h3 id=&#34;1-listing-页面缩略文堆在一起&#34;&gt;1. listing 页面缩略文堆在一起&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;添加 `&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>1. fs 内置模块</title>
      <link>/docs/node.js/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/node.js/%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97/</guid>
      <description>fs - file system node 内置的一个模块 里面存放的都是操作文件相关的方法 使用的时候不需要自己定义，但是需要导入 const fs = require(&#39;fs&#39;) readFile() 异步读</description>
    </item>
    
    <item>
      <title>2. 第三方模块</title>
      <link>/docs/node.js/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/node.js/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97/</guid>
      <description>第三方模块就是别人写好的内容, 拿来直接用. 大部分都是为了完成某一单一功能类的插件. moment 专门用来处理时间 的第三方模</description>
    </item>
    
    <item>
      <title>3. 自定义模块</title>
      <link>/docs/node.js/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/node.js/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97/</guid>
      <description>/* 每一个 js 文件天生自带一个变量叫做 module Module { id: &#39;.&#39;, // 当前文件的存储路径 path: &#39;E:\\BK_GP_20\\05_第五周\</description>
    </item>
    
    <item>
      <title>4. 了解 npm</title>
      <link>/docs/node.js/npm/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/node.js/npm/</guid>
      <description>包管理器 包 每一个插件 类库 框架 叫做一个包 jQuery bootstrap 安装下载第三方内容 官网下载 找人要 npm下载 专门用来下载第三方包的 工具</description>
    </item>
    
    <item>
      <title>5. 了解 nrm</title>
      <link>/docs/node.js/nrm/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/docs/node.js/nrm/</guid>
      <description>npm 的下载地址 默认在国外 下载会比较慢, 容易丢包 解决办法: 换一个国内的下载地址 npm 地址 npm 的原始地址 yarn 地址 国外的地址 cnpm</description>
    </item>
    
    <item>
      <title>搭建博客的过程中遇到的问题</title>
      <link>/posts/%E7%A7%91%E6%8A%80/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>academic 主题文档不清楚 对于 widget 的使用, 总是找不到合适的解决方案. 文档有时候会在关键的时候出现遗漏. 并且整个文档红色的主</description>
    </item>
    
    <item>
      <title>如何简单快速地搭建一个静态博客</title>
      <link>/posts/%E7%A7%91%E6%8A%80/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E7%A7%91%E6%8A%80/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</guid>
      <description>博客的作用: 浪费时间 装逼 感动自己 为了充分发挥博客的第 2 点作用, 我研究了如何快速的把自己的笔记内容, 轻松地转化为</description>
    </item>
    
    <item>
      <title>Diagram Support</title>
      <link>/posts/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6/diagram-support/</link>
      <pubDate>Wed, 31 Mar 2021 13:11:22 +0800</pubDate>
      
      <guid>/posts/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6/diagram-support/</guid>
      <description>&lt;p&gt;Eureka supports the rendering of diagrams by using Mermaid.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Support</title>
      <link>/posts/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6/math-support/</link>
      <pubDate>Fri, 20 Nov 2020 22:52:56 +0800</pubDate>
      
      <guid>/posts/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6/math-support/</guid>
      <description>&lt;p&gt;Eureka supports the rendering of mathematical formulas by using KaTeX.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 1</title>
      <link>/docs/example-doc/chapter-1/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/example-doc/chapter-1/</guid>
      <description>&lt;p&gt;This is chapter 1 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 1</title>
      <link>/docs/example-doc/nested-chapter/chapter-1/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/example-doc/nested-chapter/chapter-1/</guid>
      <description>&lt;p&gt;This is chapter 1 of nested chapter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>/docs/example-doc/chapter-2/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/example-doc/chapter-2/</guid>
      <description>&lt;p&gt;This is chapter 2 of example doc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chapter 2</title>
      <link>/docs/example-doc/nested-chapter/chapter-2/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/example-doc/nested-chapter/chapter-2/</guid>
      <description>&lt;p&gt;This is chapter 2 of nested chapter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Featured Image</title>
      <link>/posts/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6/featured-image/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6/featured-image/</guid>
      <description>&lt;p&gt;Maecenas maximus, elit in ornare porttitor, nisi eros hendrerit nisl, sed fermentum nulla urna blandit tellus.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>/posts/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>/posts/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6/placeholder-text/</guid>
      <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>/posts/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E5%88%9D%E5%A7%8B%E6%96%87%E4%BB%B6/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java-stream-data-io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java-stream-data-io/</guid>
      <description>Java 流(Stream)、文件(File)和IO Java 的控制台输入由 System.in 完成。 为了获得一个绑定到控制台的字符流，你可以把</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java-stringbuilder-%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java-stringbuilder-%E7%B1%BB/</guid>
      <description>StringBuilder 类 当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。 和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java-string%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java-string%E7%B1%BB/</guid>
      <description>Java String 类 String 类是不可改变的解析，例如： String s = &amp;quot;Google&amp;quot;; System.out.println(&amp;quot;s = &amp;quot; + s); s = &amp;quot;Runoob&amp;quot;; System.out.println(&amp;quot;s = &amp;quot; + s); 输出结果为： Google Runoob 从结果上看是改变了，但为什</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java-%E5%A4%9A%E6%80%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java-%E5%A4%9A%E6%80%81/</guid>
      <description>Java 多态 class Shape { void draw() {} } class Circle extends Shape { void draw() { System.out.println(&amp;quot;Circle.draw()&amp;quot;); } } class Square extends Shape { void draw() { System.out.println(&amp;quot;Square.draw()&amp;quot;); } } class Triangle extends Shape { void draw() { System.out.println(&amp;quot;Triangle.draw()&amp;quot;); } } 例子: 多态 public class Test { public static void</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java-%E5%B0%81%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java-%E5%B0%81%E8%A3%85/</guid>
      <description>Java 封装（Encapsulation） 在面向对象程式设计方法中，封装（英语：Encapsulation）是指一种</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>Java 异常处理 捕获异常 使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。 try/cat</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java-%E6%8A%BD%E8%B1%A1%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java-%E6%8A%BD%E8%B1%A1%E7%B1%BB/</guid>
      <description>Java 抽象类 在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java-%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java-%E6%8E%A5%E5%8F%A3/</guid>
      <description>Java接口 Interface 接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java-%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java-%E6%95%B0%E7%BB%84/</guid>
      <description>Java数组 创建数组 Java语言使用 **new **操作符来创建数组，语法如下: arrayRefVar = new dataType[arraySize]; 上面的语法语句做了两件事： 使用 dataType[arraySize]</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java-%E6%9E%9A%E4%B8%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java-%E6%9E%9A%E4%B8%BE/</guid>
      <description>Java 枚举 Java 枚举类使用 enum 关键字来定义，各个常量使用逗号 , 来分割。 例如定义一个颜色的枚举类。 enum Color { RED, GREEN, BLUE; } public class Test { //</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>Java 正则表达式 正则表达式 描述 this is text 匹配字符串 &amp;ldquo;this is text&amp;rdquo; this\s+is\s+text 注意字符串中的 \s+。匹配单词 &amp;ldquo;this&amp;rdquo; 后面的 \s+ 可以匹配多个空格，之</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</guid>
      <description>变量类型 Java 语言支持的变量类型有: 类变量：独立于方法之外的变量，用 static 修饰。 (静态变量) 实例变量：独立于方法之外的</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/java-basics/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/java-basics/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>Java环境配置 Windows下的环境配置 https://www.oracle.com/technetwork/java/javase/overview/index.html 到此网站下载对应的 JDK。 安装完成后，右击&amp;quot;我的电脑&amp;q</description>
    </item>
    
  </channel>
</rss>
